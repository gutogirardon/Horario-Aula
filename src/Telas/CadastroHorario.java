/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import Model.Horario;
import DAO.HorarioDAO;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gustavo Girardon
 */
public class CadastroHorario extends javax.swing.JFrame {

    /**
     * Creates new form CadastroHorario
     */
    public CadastroHorario() {
        initComponents();
        this.setLocationRelativeTo(null);
        cmbAula.setVisible(false);
        jpHora.setVisible(false);
        popularComboProfessor();
        popularComboDisciplina();
        exibirInformacoes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Grupinho = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        cmbProfessor = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cmbDisciplina = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cmbAula = new javax.swing.JComboBox<>();
        rbHorario = new javax.swing.JRadioButton();
        rbAula = new javax.swing.JRadioButton();
        jpHora = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtHoraInicial = new javax.swing.JFormattedTextField();
        txtHoraFinal = new javax.swing.JFormattedTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHorario = new javax.swing.JTable();
        cmbDiaSemana = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        cmbPeriodo = new javax.swing.JComboBox<>();
        btnSalvar = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(900, 502));
        setPreferredSize(new java.awt.Dimension(1050, 551));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        jLabel2.setText("Professor");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 40, -1, -1));

        cmbProfessor.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        cmbProfessor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProfessorActionPerformed(evt);
            }
        });
        getContentPane().add(cmbProfessor, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 66, 334, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        jLabel3.setText("Disciplina");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 129, -1, -1));

        cmbDisciplina.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        cmbDisciplina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDisciplinaActionPerformed(evt);
            }
        });
        getContentPane().add(cmbDisciplina, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 155, 271, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        jLabel4.setText("Dia da semana");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, -1, -1));

        cmbAula.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        cmbAula.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1º Aula", "2º Aula", "3º Aula", "4º Aula", "5º Aula", "6º Aula", " " }));
        cmbAula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAulaActionPerformed(evt);
            }
        });
        getContentPane().add(cmbAula, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, 271, -1));

        Grupinho.add(rbHorario);
        rbHorario.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        rbHorario.setText("Horário");
        rbHorario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbHorarioMouseClicked(evt);
            }
        });
        getContentPane().add(rbHorario, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 370, -1, -1));

        Grupinho.add(rbAula);
        rbAula.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        rbAula.setText("Aula");
        rbAula.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbAulaMouseClicked(evt);
            }
        });
        getContentPane().add(rbAula, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 370, -1, -1));

        jpHora.setBackground(new java.awt.Color(255, 255, 255));
        jpHora.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jLabel1.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        jLabel1.setText("Das");

        jLabel5.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        jLabel5.setText("Às ");

        try {
            txtHoraInicial.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtHoraInicial.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        try {
            txtHoraFinal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtHoraFinal.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        javax.swing.GroupLayout jpHoraLayout = new javax.swing.GroupLayout(jpHora);
        jpHora.setLayout(jpHoraLayout);
        jpHoraLayout.setHorizontalGroup(
            jpHoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpHoraLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtHoraInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtHoraFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        jpHoraLayout.setVerticalGroup(
            jpHoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpHoraLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpHoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addComponent(txtHoraInicial)
                    .addComponent(txtHoraFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9))
        );

        getContentPane().add(jpHora, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 400, -1, -1));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        tblHorario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Professor", "Disciplina", "Dia da Semana", "Período", "Aula"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHorario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHorarioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblHorario);
        if (tblHorario.getColumnModel().getColumnCount() > 0) {
            tblHorario.getColumnModel().getColumn(0).setPreferredWidth(2);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83))
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(391, 40, 610, 380));

        cmbDiaSemana.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        cmbDiaSemana.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Segunda ", "Terça", "Quarta ", "Quinta", "Sexta", "Sábado", "Domingo" }));
        cmbDiaSemana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDiaSemanaActionPerformed(evt);
            }
        });
        getContentPane().add(cmbDiaSemana, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, 271, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        jLabel6.setText("Período");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, -1, -1));

        cmbPeriodo.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        cmbPeriodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Manhã", "Tarde", "Noite", "Integral" }));
        cmbPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPeriodoActionPerformed(evt);
            }
        });
        getContentPane().add(cmbPeriodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, 271, -1));

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalvar, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 460, 120, 42));

        btnAtualizar.setText("Atualizar");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnAtualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 460, 120, 42));

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });
        getContentPane().add(btnExcluir, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 460, 120, 42));

        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpar, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 460, 120, 42));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbProfessorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProfessorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbProfessorActionPerformed

    private void cmbDisciplinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDisciplinaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDisciplinaActionPerformed

    private void cmbAulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAulaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbAulaActionPerformed

    private void rbHorarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbHorarioMouseClicked
        jpHora.setVisible(true);
        cmbAula.setVisible(false);
    }//GEN-LAST:event_rbHorarioMouseClicked

    private void rbAulaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbAulaMouseClicked
        cmbAula.setVisible(true);
        jpHora.setVisible(false);
    }//GEN-LAST:event_rbAulaMouseClicked

    private void cmbDiaSemanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDiaSemanaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDiaSemanaActionPerformed

    private void cmbPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPeriodoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbPeriodoActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        if( cmbProfessor.getSelectedItem()!= null && cmbProfessor.getSelectedItem().toString().trim().length()>0 &&
            cmbDiaSemana.getSelectedItem()!= null && cmbDiaSemana.getSelectedItem().toString().trim().length()>0 &&
            cmbPeriodo.getSelectedItem()!= null && cmbPeriodo.getSelectedItem().toString().trim().length()>0 &&
            cmbDisciplina.getSelectedItem()!= null && cmbDisciplina.getSelectedItem().toString().trim().length()>0) {
                
                Horario c = new Horario();
                c.setProfessor(cmbProfessor.getSelectedItem().toString());
                c.setPeriodo(cmbPeriodo.getSelectedItem().toString());
                c.setDiaSemana(cmbDiaSemana.getSelectedItem().toString());
                c.setDisciplina(cmbDisciplina.getSelectedItem().toString());
                if(cmbAula.isVisible()){
                    c.setHorario(cmbAula.getSelectedItem().toString());
                } else if (jpHora.isVisible()) {
                    if(traduzHoras()== null){
                        JOptionPane.showMessageDialog(null, "Insira um horário válido.", 
                        "Inserir horário", JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }
                    c.setHorario(traduzHoras());
                    
                } else {
                    System.out.println("Errrrrro!");
                }
                
                boolean teste = confereHorario(c.getProfessor(),c.getDiaSemana(),c.getHorario(), c.getPeriodo());
                if(teste == false) {
                    JOptionPane.showMessageDialog(null, "Este horário já está sendo utilizado.", 
                        "Horário incorreto", JOptionPane.INFORMATION_MESSAGE);
                        return;
                }
                
                
                HorarioDAO pd = new HorarioDAO();
                boolean salvou = pd.salvarHorario(c);
                
                salvar(salvou);
                
            } else {
                JOptionPane.showMessageDialog(null, "Todas as informações precisam ser preenchidas!","Dados incompletos", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        if( cmbProfessor.getSelectedItem()!= null && cmbProfessor.getSelectedItem().toString().trim().length()>0 &&
            cmbDiaSemana.getSelectedItem()!= null && cmbDiaSemana.getSelectedItem().toString().trim().length()>0 &&
            cmbPeriodo.getSelectedItem()!= null && cmbPeriodo.getSelectedItem().toString().trim().length()>0 &&
            cmbDisciplina.getSelectedItem()!= null && cmbDisciplina.getSelectedItem().toString().trim().length()>0) {
                
                Horario c = new Horario();
                
                Object Codigo = tblHorario.getModel().getValueAt(tblHorario.getSelectedRow(), 0);
                int cod = Integer.parseInt(Codigo.toString());
            
                c.setHorarioID(cod);
                c.setProfessor(cmbProfessor.getSelectedItem().toString());
                c.setPeriodo(cmbPeriodo.getSelectedItem().toString());
                c.setDiaSemana(cmbDiaSemana.getSelectedItem().toString());
                c.setDisciplina(cmbDisciplina.getSelectedItem().toString());
                c.setHorario(cmbAula.getSelectedItem().toString());
                
                HorarioDAO pd = new HorarioDAO();
                boolean salvou = pd.atualizarHorario(c);
                
                salvar(salvou);
                
            } else {
                JOptionPane.showMessageDialog(null, "Todas as informações precisam ser preenchidas!","Dados incompletos", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void tblHorarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHorarioMouseClicked
        if(tblHorario.getSelectedRow() >= 0){

            Object professor = tblHorario.getModel().getValueAt(tblHorario.getSelectedRow(), 1);
            String e = professor.toString();
            cmbProfessor.setSelectedItem(e);
            
            Object disciplina = tblHorario.getModel().getValueAt(tblHorario.getSelectedRow(), 2);
            String d = disciplina.toString();
            cmbDisciplina.setSelectedItem(d);
            
            Object diaSemana = tblHorario.getModel().getValueAt(tblHorario.getSelectedRow(), 3);
            String ds = diaSemana.toString();
            cmbDiaSemana.setSelectedItem(ds);
            
            Object periodo = tblHorario.getModel().getValueAt(tblHorario.getSelectedRow(), 4);
            String p = periodo.toString();
            cmbPeriodo.setSelectedItem(p);
            
            Object aula = tblHorario.getModel().getValueAt(tblHorario.getSelectedRow(), 5);
            String a = aula.toString();
            cmbAula.setSelectedItem(a);
            
            
            
        }
    }//GEN-LAST:event_tblHorarioMouseClicked

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limparCampos();
        traduzHorasManha();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        if(tblHorario.getSelectedRow() >= 0){
            Object Codigo = tblHorario.getModel().getValueAt(tblHorario.getSelectedRow(), 0);
            Codigo.toString();
            String c = Codigo.toString();
            int cod = Integer.parseInt(c);
            HorarioDAO pd = new HorarioDAO();
            boolean excluiu = pd.excluirHorario(cod);
            
            if(excluiu){
                esconderInfomacoes();
                exibirInformacoes();
                JOptionPane.showMessageDialog(null, "Horário apagado.", 
                        "Apagar Horário", JOptionPane.INFORMATION_MESSAGE);
                limparCampos();
            } else {
                JOptionPane.showMessageDialog(null, "Horário não foi apagada.", 
                        "Apagar Horário", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha.", 
                        "Dados incompletos", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroHorario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroHorario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroHorario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroHorario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroHorario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup Grupinho;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox<String> cmbAula;
    private javax.swing.JComboBox<String> cmbDiaSemana;
    private javax.swing.JComboBox<String> cmbDisciplina;
    private javax.swing.JComboBox<String> cmbPeriodo;
    private javax.swing.JComboBox<String> cmbProfessor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jpHora;
    private javax.swing.JRadioButton rbAula;
    private javax.swing.JRadioButton rbHorario;
    private javax.swing.JTable tblHorario;
    private javax.swing.JFormattedTextField txtHoraFinal;
    private javax.swing.JFormattedTextField txtHoraInicial;
    // End of variables declaration//GEN-END:variables
    public final void popularComboProfessor(){
        HorarioDAO a = new HorarioDAO();
        Connection conn = null;
         
         try {
            conn = a.abrirConexao();
            //BUSCA DE TODOS OS NOMES CONTIDOS NA TABELA
            if(conn != null){
                String Consulta = "SELECT nome FROM Professor ORDER BY nome";
                Statement stm = conn.createStatement();
                ResultSet resultado = stm.executeQuery(Consulta);
                
                int cont = 0;
                List<String> list = new ArrayList<String>();
                //LOOP REALIZADO PARA PREENCHER A LIST COM OS VALORES RETORNADOS
                while( resultado.next() ) {    
                cont++;
           
                String nome = resultado.getString("Nome"); 
                
                list.add(nome);
                DefaultComboBoxModel defaultComboModel = new DefaultComboBoxModel(list.toArray());
                cmbProfessor.setModel(defaultComboModel);
              
                }
                
            }
        } catch(SQLException ex){
            System.out.println("Erro ao consultar os dados do BD.");
        } finally {
            a.fecharConexao(conn);
        }
        
    }
    
    public final void popularComboDisciplina(){
        HorarioDAO a = new HorarioDAO();
        Connection conn = null;
         
         try {
            conn = a.abrirConexao();
            //BUSCA DE TODOS OS NOMES CONTIDOS NA TABELA
            if(conn != null){
                String Consulta = "SELECT nome FROM Disciplina ORDER BY nome";
                Statement stm = conn.createStatement();
                ResultSet resultado = stm.executeQuery(Consulta);
                
                int cont = 0;
                List<String> list = new ArrayList<String>();
                //LOOP REALIZADO PARA PREENCHER A LIST COM OS VALORES RETORNADOS
                while( resultado.next() ) {    
                cont++;
           
                String nome = resultado.getString("Nome"); 
                
                list.add(nome);
                DefaultComboBoxModel defaultComboModel = new DefaultComboBoxModel(list.toArray());
                cmbDisciplina.setModel(defaultComboModel);
              
                }
                
            }
        } catch(SQLException ex){
            System.out.println("Erro ao consultar os dados do BD.");
        } finally {
            a.fecharConexao(conn);
        }
        
    }
    
    public final void exibirInformacoes(){
        HorarioDAO p = new HorarioDAO();
        Connection conn = null;
         
         try {
            conn = p.abrirConexao();
           
            if(conn != null){
                String Consulta = "SELECT HorarioID, NomeProfessor, NomeDisciplina, DiaSemana, Periodo, Aula FROM Horario ORDER BY HorarioID";
                Statement stm = conn.createStatement();
                ResultSet resultado = stm.executeQuery(Consulta);
                
                int cont = 0;
           
                while( resultado.next() ) {    
                cont++;
                
                String horarioID = resultado.getString("HorarioID"); 
                String nomeProfessor = resultado.getString("NomeProfessor"); 
                String nomeDisciplina = resultado.getString("NomeDisciplina"); 
                String diaSemana = resultado.getString("DiaSemana"); 
                String periodo = resultado.getString("Periodo");
                String aula = resultado.getString("aula");
                
                DefaultTableModel modelo = (DefaultTableModel) tblHorario.getModel();
                String[] coluna = new String[] {
                resultado.getString("HorarioID"), 
                resultado.getString("NomeProfessor"), 
                resultado.getString("NomeDisciplina"), 
                resultado.getString("DiaSemana"), 
                resultado.getString("Periodo"), 
                resultado.getString("Aula") }; 
                modelo.addRow(coluna);
                }
                
            }
        } catch(SQLException ex){
            System.out.println("Erro ao consultar os dados do BD.");
        } finally {
            p.fecharConexao(conn);
        }
        
    }
    
    public void esconderInfomacoes(){
        DefaultTableModel modelo = (DefaultTableModel) tblHorario.getModel();
        modelo.setNumRows(0);
    }
    
    public void atualizarTabela(){
        esconderInfomacoes();
        exibirInformacoes();
    }
    
    public void limparCampos(){
        cmbDiaSemana.setSelectedIndex(0);
        cmbDisciplina.setSelectedIndex(0);
        cmbProfessor.setSelectedIndex(0);
        cmbPeriodo.setSelectedIndex(0);
    }
    
    public void salvar(boolean s){
        if(s){
            limparCampos();
            atualizarTabela();
            JOptionPane.showMessageDialog(null, "Horário salvo com sucesso!","Cadastrar curso", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar horário!","Atualizar Horário", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    public String traduzHorasManha(){
        String hi = txtHoraInicial.getText();
        String hf = txtHoraFinal.getText();
        String hora = hi+"-"+hf;
        String Aula = null;
        
        switch(hora){
            case "07:30-08:30":
                Aula = "1º Aula";
                break;
            case "08:30-09:30":
                Aula = "2º Aula";
                break;
            case "09:30-10:30":
                Aula = "3º Aula";
                break;
            case "10:30-11:30":
                Aula = "4º Aula";
                break;
            case "11:30-12:30":
                Aula = "5º Aula";
                break;
            default:
                Aula = null;
                break;
                
                
        }
        System.out.print(Aula);
        return Aula;
    }
    
    public String traduzHorasTarde(){
        String hi = txtHoraInicial.getText();
        String hf = txtHoraFinal.getText();
        String hora = hi+"-"+hf;
        String Aula = null;
        
        switch(hora){
            case "13:30-14:30":
                Aula = "1º Aula";
                break;
            case "14:30-15:30":
                Aula = "2º Aula";
                break;
            case "15:30-16:30":
                Aula = "3º Aula";
                break;
            case "16:30-17:30":
                Aula = "4º Aula";
                break;
            case "17:30-18:30":
                Aula = "5º Aula";
                break;
            default:
                Aula = null;
                break;
        }
        
        return Aula;
    }
    
    public String traduzHorasNoite(){
        String hi = txtHoraInicial.getText();
        String hf = txtHoraFinal.getText();
        String hora = hi+"-"+hf;
        String Aula = null;
        
        switch(hora){
            case "18:30-19:30":
                Aula = "1º Aula";
                break;
            case "19:30-20:30":
                Aula = "2º Aula";
                break;
            case "20:30-21:30":
                Aula = "3º Aula";
                break;
            case "21:30-22:30":
                Aula = "4º Aula";
                break;
            default:
                Aula = null;
                break;
        }
        
        return Aula;
    }
    
    public String traduzHoras(){
        String periodo = cmbPeriodo.getSelectedItem().toString();
        String Aula;
        switch (periodo){
            case "Manhã":
                Aula = traduzHorasManha();
                break;
            case "Tarde":
                Aula = traduzHorasTarde();
                break;
            case "Noite":
                Aula = traduzHorasNoite();
                break;
            default:
                Aula = null;
                break;
        }
        return Aula;
    }
    
    public boolean confereHorario(String nomeProfessor, String diaSemana, String aula, String periodo){
        boolean valor = false;
        String nome = null;
        HorarioDAO a = new HorarioDAO();
        Connection conn = null;
         
         try {
            conn = a.abrirConexao();
            if(conn != null){
                String Consulta = "SELECT * FROM Horario WHERE nomeProfessor = '"+nomeProfessor+"' AND DiaSemana = '"+diaSemana+"' AND aula ='"+aula+"' AND periodo = '"+periodo+"'";
                Statement stm = conn.createStatement();
                ResultSet resultado = stm.executeQuery(Consulta);
                
                int cont = 0;
                while( resultado.next() ) {    
                cont++;
                nome = resultado.getString("Nome"); 
                }
            }
            System.out.println(nome);
            if(nome == null){
                valor = true;
            }
        } catch(SQLException ex){
            System.out.println("Erro ao consultar os dados do BD.");
        } finally {
            a.fecharConexao(conn);
        }
        
     return valor;   
    }

}
