/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import Model.Professor;
import DAO.ProfessorDAO;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gustavo Girardon
 */
public class CadastroProfessor extends javax.swing.JFrame {

    /**
     * Creates new form CadastroProfessor
     */
    public CadastroProfessor() {
        initComponents();
        this.setLocationRelativeTo(null);
        exibirInformacoes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTelefone = new javax.swing.JFormattedTextField();
        txtDataNascimento = new javax.swing.JFormattedTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProfessor = new javax.swing.JTable();
        btnSalvar = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Professores");

        jLabel1.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        jLabel1.setText("Nome");

        txtNome.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        jLabel2.setText("E-mail");

        txtEmail.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        jLabel3.setText("Telefone");

        jLabel4.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        jLabel4.setText("Data de Nascimento");

        try {
            txtTelefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtTelefone.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N

        try {
            txtDataNascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtDataNascimento.setText("    /    /    ");
        txtDataNascimento.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        tblProfessor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Email", "Telefone", "Idade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProfessor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProfessorMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tblProfessorMouseExited(evt);
            }
        });
        tblProfessor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblProfessorPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(tblProfessor);
        if (tblProfessor.getColumnModel().getColumnCount() > 0) {
            tblProfessor.getColumnModel().getColumn(0).setResizable(false);
            tblProfessor.getColumnModel().getColumn(0).setPreferredWidth(2);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
        );

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnAtualizar.setText("Atualizar");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel4)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1)
                                .addComponent(txtNome)
                                .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed

            if( txtNome.getText() != null && txtNome.getText().trim().length() > 0 &&
                txtEmail.getText() != null && txtEmail.getText().trim().length()>0 &&
                txtTelefone.getText() != null && txtTelefone.getText().trim().length()>0 &&
                txtDataNascimento.getText() != null && txtDataNascimento.getText().trim().length()>0) {
                
                //Adiciona as informações no objeto p
                Professor p = new Professor();
                p.setNome(txtNome.getText());
                p.setEmail(txtEmail.getText());
                p.setTelefone(txtTelefone.getText());
                p.setDataNascimento(formataData(txtDataNascimento.getText()));
                
                
                //Chama o método salvar (vindo do pd) com o objeto p como parâmetro
                ProfessorDAO pd = new ProfessorDAO();
                boolean salvou = pd.salvarProfessor(p);
                
                
                if(salvou){
                    limpaCampos();
                    esconderInfomacoes();
                    exibirInformacoes();
                    JOptionPane.showMessageDialog(null, "Professor salvo com sucesso!","Cadastrar professor", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Erro ao salvar professor!","Cadastrar professor", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Todas as informações precisam ser preenchidas!","Dados incompletos", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void tblProfessorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProfessorMouseClicked
        if(tblProfessor.getSelectedRow() >= 0){

            Object nome = tblProfessor.getModel().getValueAt(tblProfessor.getSelectedRow(), 1);
            String n = nome.toString();
            txtNome.setText(n);
            
            Object email = tblProfessor.getModel().getValueAt(tblProfessor.getSelectedRow(), 2);
            String e = email.toString();
            txtEmail.setText(e);
            
            Object telefone = tblProfessor.getModel().getValueAt(tblProfessor.getSelectedRow(), 3);
            String t = telefone.toString();
            String t2 = t.replaceAll("[()-]", "");
            txtTelefone.setText(t2);
            
            Object data = tblProfessor.getModel().getValueAt(tblProfessor.getSelectedRow(), 4);
            String d = data.toString();
            
            //Mudar a formatação do banco para a textfield
            String[] s = d.split("-");
            String novaData = s[2]+"-"+s[1]+"-"+s[0];
            String datan = novaData.replaceAll("-", "");
            txtDataNascimento.setText(datan);
        }
      
    }//GEN-LAST:event_tblProfessorMouseClicked

    private void tblProfessorMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProfessorMouseExited
        
    }//GEN-LAST:event_tblProfessorMouseExited

    private void tblProfessorPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblProfessorPropertyChange
        
    }//GEN-LAST:event_tblProfessorPropertyChange

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limpaCampos();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        if(tblProfessor.getSelectedRow() >= 0){
            Object Codigo = tblProfessor.getModel().getValueAt(tblProfessor.getSelectedRow(), 0);
            Codigo.toString();
            String c = Codigo.toString();
            int cod = Integer.parseInt(c);
            ProfessorDAO pd = new ProfessorDAO();
            boolean excluiu = pd.excluirProfessor(cod);
            
            if(excluiu){
                esconderInfomacoes();
                exibirInformacoes();
                JOptionPane.showMessageDialog(null, "Professor apagado(a).", 
                        "Apagar Professor", JOptionPane.INFORMATION_MESSAGE);
                limpaCampos();
            } else {
                JOptionPane.showMessageDialog(null, "Professor não foi apagada.", 
                        "Apagar Professor", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha.", 
                        "Dados incompletos", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
                if (txtNome.getText() != null && txtNome.getText().trim().length() > 0){
            
            Object Codigo = tblProfessor.getModel().getValueAt(tblProfessor.getSelectedRow(), 0);
            int cod = Integer.parseInt(Codigo.toString());
            
            Professor p = new Professor();
            p.setProfessorId(cod);
            p.setNome(txtNome.getText());
            p.setEmail(txtEmail.getText());
            p.setTelefone(txtTelefone.getText());
            p.setDataNascimento(formataData(txtDataNascimento.getText()));
            
            
            ProfessorDAO pd = new ProfessorDAO();
            boolean atualizou = pd.atualizarProfessor(p);
            
            if(atualizou){
                limpaCampos();
                esconderInfomacoes();
                exibirInformacoes();
                JOptionPane.showMessageDialog(null, "Professor(a) atualizado(a) com sucesso!","Atualizar Professor(a)", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Erro ao atualizar professor(a)!","Atualizar Professor(a)", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Todas as informações precisam ser preenchidas!","Dados incompletos", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAtualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroProfessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroProfessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroProfessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroProfessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroProfessor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblProfessor;
    private javax.swing.JFormattedTextField txtDataNascimento;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNome;
    private javax.swing.JFormattedTextField txtTelefone;
    // End of variables declaration//GEN-END:variables

    private String formataData(String DataAntiga){
        String data = DataAntiga.replaceAll("/", "-");
        String[] s = data.split("-");
        String novaData = s[2]+"-"+s[1]+"-"+s[0];
        
        return novaData;
    }
    
    private void limpaCampos(){
       txtNome.setText("");
       txtEmail.setText("");
       txtTelefone.setText("");
       txtDataNascimento.setText("");
    }

    public final void exibirInformacoes(){
        ProfessorDAO p = new ProfessorDAO();
        Connection conn = null;
         
         try {
            conn = p.abrirConexao();
           
            if(conn != null){
                String Consulta = "SELECT * FROM Professor ORDER BY NOME";
                Statement stm = conn.createStatement();
                ResultSet resultado = stm.executeQuery(Consulta);
                
                int cont = 0;
           
                while( resultado.next() ) {    
                cont++;
                
                String professorID = resultado.getString("ProfessorID"); 
                String nome = resultado.getString("Nome"); 
                String email = resultado.getString("Email"); 
                String telefone = resultado.getString("Telefone"); 
                String dataNascimento = resultado.getString("DataNascimento"); 
                
                DefaultTableModel modelo = (DefaultTableModel) tblProfessor.getModel();
                String[] coluna = new String[] {
                resultado.getString("ProfessorID"), 
                resultado.getString("Nome"), 
                resultado.getString("Email"), 
                resultado.getString("Telefone"), 
                resultado.getString("DataNascimento")}; 
                modelo.addRow(coluna);
                }
                
            }
        } catch(SQLException ex){
            System.out.println("Erro ao consultar os dados do BD.");
        } finally {
            p.fecharConexao(conn);
        }
        
    }
    
    public void esconderInfomacoes(){
        DefaultTableModel modelo = (DefaultTableModel) tblProfessor.getModel();
        modelo.setNumRows(0);
    }
}
